package id.ac.ui.cs.advprog.b13.hiringgo.log.repository;

import id.ac.ui.cs.advprog.b13.hiringgo.log.model.Log;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

@DataJpaTest
class LogRepositoryTest {

    @Autowired
    private TestEntityManager entityManager;

    @Autowired
    private LogRepository repository;

    @Test
    void whenSaveNewLog_thenIdAssignedAndCanBeFound() {
        Log log = new Log("Title", "Desc", "Cat", "VAC-1",
                LocalDateTime.now(), LocalDateTime.now().plusHours(1), LocalDate.now(), "student-123");
        // ID is null before persisting with JPA
        assertNull(log.getId());

        Log saved = repository.save(log);
        entityManager.flush(); // Ensure changes are written to the H2 database
        entityManager.clear(); // Detach all entities so findById fetches from DB

        assertNotNull(saved.getId(), "ID should be generated by JPA");
        Optional<Log> found = repository.findById(saved.getId());
        assertTrue(found.isPresent(), "Saved log should be found");
        assertEquals(saved.getTitle(), found.get().getTitle());
    }

    @Test
    void whenSaveMultiple_thenIdsIncrementOrAreUnique() {
        Log firstLog = new Log("A","B","C","V",
                LocalDateTime.now(), LocalDateTime.now().plusHours(1), LocalDate.now(), "student-abc");
        Log savedFirst = repository.save(firstLog);
        entityManager.flush();

        Log secondLog = new Log("X","Y","Z","V",
                LocalDateTime.now(), LocalDateTime.now().plusHours(1), LocalDate.now(), "student-xyz");
        Log savedSecond = repository.save(secondLog);
        entityManager.flush();
        entityManager.clear();


        assertNotNull(savedFirst.getId());
        assertNotNull(savedSecond.getId());
        assertNotEquals(savedFirst.getId(), savedSecond.getId(), "IDs should be unique");
        // For GenerationType.IDENTITY, IDs are typically incremental, but we only assert uniqueness
        // as the exact increment logic can depend on the DB and JPA provider.
    }

    @Test
    void whenDeleteLog_thenCannotBeFound() {
        Log log = new Log("T","D","C","V",
                LocalDateTime.now(), LocalDateTime.now().plusHours(1), LocalDate.now(), "student-delete");
        Log saved = repository.save(log);
        entityManager.flush();
        Long id = saved.getId();
        assertNotNull(id);
        assertTrue(repository.findById(id).isPresent());

        repository.delete(saved);
        entityManager.flush();
        entityManager.clear();

        assertFalse(repository.findById(id).isPresent(), "Deleted log should not be found");
    }

    @Test
    void whenFindAll_thenReturnAllSaved() {
        Log log1 = new Log("1","D1","C","V",
                LocalDateTime.now(), LocalDateTime.now().plusHours(1), LocalDate.now(), "s1");
        repository.save(log1);


        Log log2 = new Log("2","D2","C","V",
                LocalDateTime.now(), LocalDateTime.now().plusHours(1), LocalDate.now(), "s2");
        repository.save(log2);
        entityManager.flush();
        entityManager.clear();

        List<Log> all = repository.findAll();
        assertEquals(2, all.size());
    }
}
