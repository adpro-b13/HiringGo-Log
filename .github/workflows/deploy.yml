name: Continuous Deployment (CD)

on:
  workflow_dispatch:
    inputs:
      host_dns:
        description: "Public DNS or IP (e.g., DuckDNS)"
        required: true
      db_url:
        description: "Database JDBC URL"
        required: true
      db_user:
        description: "Database user"
        required: true
      db_pass:
        description: "Database password"
        required: true
      enable_rollback_backup:
        description: "Create rollback backup"
        required: false
        default: true
        type: boolean

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.extract-tag.outputs.image-tag }}
      commit-sha: ${{ steps.extract-tag.outputs.commit-sha }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract deployment info
        id: extract-tag
        run: |
          IMAGE_TAG="${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:latest"
          COMMIT_SHA="${{ github.sha }}"
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "commit-sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "Deploying: $IMAGE_TAG (commit: $COMMIT_SHA)"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: SSH into EC2 and deploy container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ github.event.inputs.host_dns }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            
            echo "Starting deployment process..."
            echo "Image to deploy: ${{ needs.build-and-push.outputs.image-tag }}"
            echo "Commit SHA: ${{ needs.build-and-push.outputs.commit-sha }}"
            
            # Create rollback backup if enabled
            if [ "${{ github.event.inputs.enable_rollback_backup }}" = "true" ]; then
              if docker ps -q -f name=hiringgo | grep -q .; then
                echo "Creating rollback backup..."
                BACKUP_TAG="rollback-$(date +%Y%m%d-%H%M%S)"
                docker commit hiringgo "${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:$BACKUP_TAG"
                echo "Backup created: $BACKUP_TAG"
              fi
            fi
            
            # Stop and remove existing container gracefully
            if docker ps -q -f name=hiringgo | grep -q .; then
              echo "Stopping existing container..."
              docker stop hiringgo
            fi
            
            if docker ps -aq -f name=hiringgo | grep -q .; then
              echo "Removing existing container..."
              docker rm hiringgo
            fi
            
            # Pull the latest image from Docker Hub
            echo "Pulling latest image..."
            docker pull ${{ needs.build-and-push.outputs.image-tag }}
            
            # Run the new container with proper error handling
            echo "Starting new container..."
            docker run -d --name hiringgo \
              --restart unless-stopped \
              --add-host=host.docker.internal:host-gateway \
              -e SPRING_DATASOURCE_URL="${{ github.event.inputs.db_url }}" \
              -e SPRING_DATASOURCE_USERNAME="${{ github.event.inputs.db_user }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ github.event.inputs.db_pass }}" \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e DEPLOYMENT_COMMIT_SHA="${{ needs.build-and-push.outputs.commit-sha }}" \
              -e LOGGING_LEVEL_ID_AC_UI_CS_ADVPROG_B13_HIRINGGO_LOG=INFO \
              -p 8080:8080 \
              ${{ needs.build-and-push.outputs.image-tag }}
            
            # Health check with automatic rollback on failure
            echo "Performing health checks..."
            HEALTH_CHECK_PASSED=false
            
            for i in {1..6}; do
              sleep 10
              if curl -f http://localhost:8080/actuator/health; then
                echo "Health check passed!"
                HEALTH_CHECK_PASSED=true
                break
              else
                echo "Health check attempt $i/6 failed..."
              fi
            done
            
            if [ "$HEALTH_CHECK_PASSED" = "false" ]; then
              echo "ERROR: Deployment failed health checks"
              docker logs hiringgo --tail 50
              
              # Auto-rollback if backup exists
              if [ "${{ github.event.inputs.enable_rollback_backup }}" = "true" ]; then
                echo "Attempting automatic rollback..."
                docker stop hiringgo || true
                docker rm hiringgo || true
                
                # Find latest backup
                LATEST_BACKUP=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep rollback | head -1 | tr -d ' ')
                if [ -n "$LATEST_BACKUP" ]; then
                  echo "Rolling back to: $LATEST_BACKUP"
                  docker run -d --name hiringgo --restart unless-stopped -p 8080:8080 "$LATEST_BACKUP"
                  echo "Rollback completed"
                fi
              fi
              exit 1
            fi
            
            echo "Deployment completed successfully!"
            docker ps | grep hiringgo